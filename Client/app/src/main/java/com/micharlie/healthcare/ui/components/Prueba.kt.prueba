package com.micharlie.healthcare.ui.components

import android.annotation.SuppressLint
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.Scaffold
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.micharlie.healthcare.R
import com.micharlie.healthcare.ui.theme.primary

@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun Prueba(navController: NavController) {
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)

    DrawerBar(drawerState = drawerState, sessionState = true , content = {
                                                                          Scaffold(
                                                                                bottomBar = { BottomBar() },
                                                                                topBar = { TopBar(drawerState = drawerState) }
                                                                          ) {
                                                                              Column(
                                                                                          modifier = Modifier
                                                                                              .fillMaxSize()
                                                                                              .padding(16.dp),
                                                                                          horizontalAlignment = Alignment.CenterHorizontally,
                                                                                          verticalArrangement = Arrangement.Center
                                                                                      ) {
                                                                                          TextField(
                                                                                              value = content,
                                                                                              onValueChange = { content = it },
                                                                                              label = { Text("What's on your mind?", color = white) },
                                                                                              modifier = Modifier.fillMaxWidth(),
                                                                                              colors = TextFieldDefaults.textFieldColors(
                                                                                                  unfocusedTextColor = white,
                                                                                                  focusedTextColor = white,
                                                                                                  cursorColor = contrast1,
                                                                                                  focusedIndicatorColor = contrast2,
                                                                                                  unfocusedIndicatorColor = tertiary
                                                                                              )
                                                                                          )
                                                                                          Spacer(modifier = Modifier.height(16.dp))
                                                                                          if (errorMessage.isNotEmpty()) {
                                                                                              Text(errorMessage, color = MaterialTheme.colorScheme.error)
                                                                                              Spacer(modifier = Modifier.height(8.dp))
                                                                                          }
                                                                                          Button(
                                                                                              onClick = {
                                                                                                  println("asdasd")
                                                                                                  println("token: $token")
                                                                                                  println("coment$content")
                                                                                                  try {
                                                                                                      val token = sharedPreferencesManager.getToken()
                                                                                                      val comment = content
                                                                                                      if (token != null) {
                                                                                                          getVideoViewModel.postComment(token, content)
                                                                                                          println("token: $token")
                                                                                                          println("Post created successfully with comment: $comment")
                                                                                                      } else {
                                                                                                          println("Error: Token is null")
                                                                                                      }

                                                                                                  } catch (e: Exception) {
                                                                                                      errorMessage = e.message ?: "Error creating post"
                                                                                                      println("token: $token")

                                                                                                  }
                                                                                              },
                                                                                              modifier = Modifier
                                                                                                  .fillMaxWidth()

                                                                                          ) {
                                                                                              Text("Post", color = white)
                                                                                          }
                                                                                          Spacer(modifier = Modifier.height(16.dp))
                                                                                          // Mostrar la lista de comentarios
                                                                                          CommentsList(comments = comments)
                                                                                      }
                                                                          }
    }, navController = navController, getVideoViewModel , sharedPreferencesManager)
}
@Composable
@Preview
fun PruebaPreview() {
    Prueba(navController = rememberNavController())
}


